import tkinter as tk
from tkinter import filedialog, messagebox
import requests
from bs4 import BeautifulSoup
import csv

class ProductScraper:
    def __init__(self, master):
        self.master = master
        master.title("Product Scraper")

        self.label = tk.Label(master, text="Enter URL of e-commerce page:")
        self.label.pack()

        self.url_entry = tk.Entry(master, width=50)
        self.url_entry.pack()

        self.scrape_button = tk.Button(master, text="Scrape", command=self.scrape)
        self.scrape_button.pack()

        self.save_button = tk.Button(master, text="Save to CSV", command=self.save_to_csv)
        self.save_button.pack()

        self.products = []

    def scrape(self):
        url = self.url_entry.get()
        if not url:
            messagebox.showwarning("Input Error", "Please enter a valid URL")
            return
        
        try:
            response = requests.get(url)
            response.raise_for_status()
            soup = BeautifulSoup(response.text, 'html.parser')
            self.products = self.extract_product_info(soup)
            messagebox.showinfo("Success", f"Scraped {len(self.products)} products")
        except requests.exceptions.RequestException as e:
            messagebox.showerror("Error", f"Failed to retrieve data: {e}")

    def extract_product_info(self, soup):
        products = []
        # Example for extracting product details from a generic e-commerce page
        for item in soup.select('.product'):  # Adjust the selector based on the website
            name = item.select_one('.product-title').get_text(strip=True)
            price = item.select_one('.product-price').get_text(strip=True)
            rating = item.select_one('.product-rating').get_text(strip=True) if item.select_one('.product-rating') else "N/A"
            products.append({"Name": name, "Price": price, "Rating": rating})
        return products

    def save_to_csv(self):
        if not self.products:
            messagebox.showwarning("No Data", "No products to save")
            return

        file_path = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV files", "*.csv"), ("All files", "*.*")])
        if not file_path:
            return

        try:
            with open(file_path, mode='w', newline='', encoding='utf-8') as file:
                writer = csv.DictWriter(file, fieldnames=["Name", "Price", "Rating"])
                writer.writeheader()
                writer.writerows(self.products)
            messagebox.showinfo("Success", f"Data saved to {file_path}")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save data: {e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = ProductScraper(root)
    root.mainloop()
